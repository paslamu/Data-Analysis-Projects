title: "Cyclistic_Project"
author: "PASLAMU"
date: "6/8/2021"
output: pdf_document
---
## Setting up my environment
Notes: setting up my r environment by loading packages
```{r loading packages}
library(tidyverse)         #helps wrangle data
library(ggplot2)           #helps visualize data 
library(lubridate)         #helps wrangle date data 
library(skimr)             #for statistical data set info
getwd()                    #displays working directory
```

## Step 1: Collect Data
notes: Uploading the 'csv file' data
```{r}
q3_2019<- read_csv("Cyclistic_Tripdata/Divvy_Trips_2019_Q3.csv")
q4_2019<- read_csv("Cyclistic_Tripdata/Divvy_Trips_2019_Q4.csv")
q1_2020<- read_csv("Cyclistic_Tripdata/Divvy_Trips_2020_Q1.csv")
q2_2019 <- read_csv("Cyclistic_Tripdata/Divvy_Trips_2019_Q2")
```

## Step 2: Wrangle data and combine into a single file
```{r comparing the column names for each of the file}
colnames(q3_2019)
colnames(q4_2019)
colnames(q1_2020)
colnames(q2_2019)

```
### Rename columns to make them consistent with q1_2020
notes: As this will be the supposed going-forward table design for Divvy
```{r}
(q4_2019 <- rename(q4_2019
                   ,ride_id = trip_id
                   ,rideable_type = bikeid 
                   ,started_at = start_time  
                   ,ended_at = end_time  
                   ,start_station_name = from_station_name 
                   ,start_station_id = from_station_id 
                   ,end_station_name = to_station_name 
                   ,end_station_id = to_station_id 
                   ,member_casual = usertype))

(q3_2019 <- rename(q3_2019
                   ,ride_id = trip_id
                   ,rideable_type = bikeid 
                   ,started_at = start_time  
                   ,ended_at = end_time  
                   ,start_station_name = from_station_name 
                   ,start_station_id = from_station_id 
                   ,end_station_name = to_station_name 
                   ,end_station_id = to_station_id 
                   ,member_casual = usertype))

(q2_2019 <- rename(q2_2019
                   ,ride_id = "01 - Rental Details Rental ID"
                   ,rideable_type = "01 - Rental Details Bike ID" 
                   ,started_at = "01 - Rental Details Local Start Time"  
                   ,ended_at = "01 - Rental Details Local End Time"  
                   ,start_station_name = "03 - Rental Start Station Name" 
                   ,start_station_id = "03 - Rental Start Station ID"
                   ,end_station_name = "02 - Rental End Station Name" 
                   ,end_station_id = "02 - Rental End Station ID"
                   ,member_casual = "User Type"))

```
### Inspect the dataframes and look for incongruencies
```{r}
str(q3_2019)
str(q4_2019)
str(q2_2019)
str(q1_2020)

```
### Convert ride_id and rideable_type to character so that they can stack correctly
notes: changing the data type from num to character
```{r}
q4_2019 <- mutate(q4_2019, ride_id = as.character(ride_id)
                  ,rideable_type = as.character(rideable_type)) 
q3_2019 <- mutate(q3_2019, ride_id = as.character(ride_id)
                  ,rideable_type = as.character(rideable_type)) 
q2_2019<- mutate(q2_2019,ride_id = as.character(ride_id)
                  ,rideable_type = as.character(rideable_type))

```

### Stack individual quarter's dataframe to one big data frame
```{r}
all_trips <- bind_rows(q3_2019, q4_2019, q2_2019, q1_2020)
```
### Remove lat, long, birthyear, tripduration, and gender
```{r}
all_trips <- all_trips%>%
  select(-c(start_lat,start_lng, end_lat, end_lng, birthyear, gender, tripduration, "01 - Rental Details Duration In Seconds Uncapped", "Member Gender", "05 - Member Details Member Birthday Year"))
```

## Step 3: Clean up and add data to prepare for analysis
### Inspecting the new table that has been created
```{r}
colnames(all_trips)               #list of column names 
str(all_trips)                    #list of columns and data types(numeric, character, etc.)horizontally
skim_without_charts(all_trips)    #comprehensive summary of the datasets
summary(all_trips)                #Statistical summary of data. Mainly for numeric
```
### Begin by seeing how many observations fall under each usertype
```{r}
table(all_trips$member_casual)
```
### In the "member_casual" column, replace "Subscriber" with "member" and "Customer" with "casual"
```{r}
all_trips <-  all_trips %>% 
  mutate(member_casual = recode(member_casual
                           ,"Subscriber" = "member"
                           ,"Customer" = "casual"))
```
###  Check to make sure the proper number of observations were reassigned
```{r}
table(all_trips$member_casual)
```
### Add columns that list the date, month, day, and year of each ride
notes:  This will allow us to aggregate ride data for each month, day, or year ... before completing these operations we could only aggregate at the ride level
```{r}
all_trips$date <- as.Date(all_trips$started_at)          #The default format is yyyy-mm-dd
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")
```
### Add a "ride_length" calculation to all_trips (in seconds)
```{r}
all_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at)
```
### Inspect the column
```{r}
str(all_trips)
```
###  Convert "ride_length" from Factor to numeric so we can run calculations on the data
```{r}
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))
is.numeric(all_trips$ride_length)
```
### Remove "bad" data
notes:The dataframe includes a few hundred entries when bikes were taken out of docks and checked for quality by Divvy or ride_length was negative
```{r}
all_trips_v2 <- all_trips[!(all_trips$start_station_name == "HQ QR" | all_trips$ride_length<0),]
```

## Step4: Conduct Descriptive Analysis
notes: Descriptive analysis on ride_length
```{r}
mean(all_trips_v2$ride_length)           #straight average (total ride length / rides)
median(all_trips_v2$ride_length)         #midpoint number in the ascending array of ride lengths
max(all_trips_v2$ride_length)            #longest ride
min(all_trips_v2$ride_length)            #shortest ride

summary(all_trips_v2$ride_length)        # Condense four line into one summary() attributes
```
### Compare member and casual riders
```{r}
aggregate(all_trips_v2$ride_length~ all_trips_v2$member_casual, FUN = mean)
aggregate(all_trips_v2$ride_length~ all_trips_v2$member_casual, FUN = median)
aggregate(all_trips_v2$ride_length~ all_trips_v2$member_casual, FUN = max)
aggregate(all_trips_v2$ride_length~ all_trips_v2$member_casual, FUN = min)
```
### See the average ride time by each day for members vs casual users
```{r}
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
```
### Notice that the days of the week are out of order. Let's fix that
```{r}
all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
```
### analyze ridership data by type and weekday
```{r}
all_trips_v2 %>% 
 mutate(weekday = wday(started_at, label = TRUE)) %>%  #creates weekday field using wday()
  group_by(member_casual, weekday) %>%                 #groups by usertype and weekday
  summarise(number_of_rides = n()						         	#calculates the number of rides and average duration 
,average_duration = mean(ride_length)) %>% 	      	# calculates the average duration
  arrange(member_casual, weekday)							      	# sorts
```

## Step 4: Creating a Visualization 
Notes: Let's visualize the number of rides by rider type
```{r}
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge")
```
###  Let's create a visualization for average duration
```{r}
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
  geom_col(position = "dodge")
```
### Creating the 'counts' data frame by calculating the average_ride_length
```{r}
counts <- aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
```
### Saving the avg_ride_length 'count' file in csv
```{r}
write.csv(counts, file = '~/Desktop/Cyclistic_Tripdata/avg_ride_length.csv')
```
                  
